Alright ‚Äî let‚Äôs continue. We‚Äôll now expand each section in detail, starting with Section II: Overworld & RTS Systems.
This way we can create a layered, detailed Game Design + Systems Architecture doc.

‚∏ª

II. Overworld & RTS Systems (Expanded)

1. Overworld Map
	‚Ä¢	Purpose: Serves as the ‚Äúgrand strategy‚Äù layer where players/factions control territories, manage resources, and plan campaigns.
	‚Ä¢	Inspiration: Risk, Total War‚Äôs campaign map, and RotMG-style overworld hubs.

Features
	1.	Territorial Control
	‚Ä¢	World is divided into regions (nodes).
	‚Ä¢	Each region can be owned, contested, or neutral.
	‚Ä¢	Resources are tied to regions (gold, supply, morale boosts).
	‚Ä¢	Control affects spawn rates, dungeon access, and reinforcement paths.
	2.	RTS Integration
	‚Ä¢	Each territory can host battles that play out in RTS or Bullet Hell layers.
	‚Ä¢	Players can zoom from world map ‚Üí strategic view ‚Üí battlefield.
	3.	Factional Conflict
	‚Ä¢	AI or player factions can wage wars.
	‚Ä¢	Diplomacy layer possible (alliances, truces, betrayals).

‚∏ª

2. Multi-Layered Views

The overworld and battles are experienced across three interlinked views:
	1.	FPS View
	‚Ä¢	First-person or close-player view.
	‚Ä¢	Used for bullet-hell combat and dungeon experiences.
	‚Ä¢	Focus = precision, dodging, skill expression.
	2.	Top-Down View
	‚Ä¢	Classic action-RPG / dungeon view.
	‚Ä¢	Player controls unit/party in a tactical environment.
	‚Ä¢	Integrates loot, exploration, small skirmishes.
	3.	Strategic View
	‚Ä¢	High-level RTS mode.
	‚Ä¢	Shows units en masse.
	‚Ä¢	Features:
	‚Ä¢	Scrollable Camera: Not centered on player, can move across map.
	‚Ä¢	Non-Centered Adjustments: Camera control like an RTS.
	‚Ä¢	Mass Unit Control: Drag-to-select, hotkeys, formations.
	‚Ä¢	Command Layer: Attack, retreat, hold position, regroup.

‚ö†Ô∏è Important Rule:
	‚Ä¢	Strategic View is only for RTS commands, not bullet-hell gameplay.
	‚Ä¢	It should feel like Age of Empires / StarCraft while existing inside the same world as the FPS/Top-Down layers.

‚∏ª

3. View Locking System
	‚Ä¢	Problem: Player could abuse switching between views.
	‚Ä¢	Solution:
	‚Ä¢	Certain contexts lock the player into a view (e.g., bullet-hell dungeon ‚Üí locked FPS/Top-Down).
	‚Ä¢	Other contexts unlock transitions (strategic army battles).
	‚Ä¢	Implementation:
	‚Ä¢	State machine that tracks player context (combat, overworld, dungeon).
	‚Ä¢	Allows graceful switching only at certain nodes/events.

‚∏ª

4. Unit Representation in RTS

Unlike bullet-hell enemies (who are simple), RTS units must simulate battlefield depth:
	‚Ä¢	Represented as groups (cohesion factor).
	‚Ä¢	Can merge/split dynamically depending on morale, formation, or losses.
	‚Ä¢	Attributes (see Section III expansion) like Momentum, Morale, Cohesion, Terrain Affinity determine how units behave under pressure.

‚∏ª

5. Overworld ‚Üî Dungeon/RTS Flow
	‚Ä¢	Territory ‚Üí Battle Trigger
	‚Ä¢	Conflict in a region launches RTS/Bullet-Hell battle.
	‚Ä¢	Dungeon Placement
	‚Ä¢	Dungeons may act as special objectives on the overworld map.
	‚Ä¢	Owning a dungeon territory = unlocks resource/ability boosts.

Loop Example:
	1.	Player faction seizes contested territory on overworld.
	2.	Enters RTS view to fight off waves.
	3.	Boss spawns as a bullet-hell dungeon, requiring FPS-level precision.
	4.	Victory ‚Üí territory secured, resources gained, overworld map updated.

‚∏ª

6. Emergent Gameplay Goals
	‚Ä¢	Encourage zoom in/out strategy:
	‚Ä¢	Strategic decisions at overworld scale.
	‚Ä¢	Tactical formations at RTS scale.
	‚Ä¢	Precision skill at bullet-hell scale.
	‚Ä¢	This ensures gameplay feels multi-layered and dynamic, not stuck in one genre.

‚∏ª

‚úÖ Section II Summary

The overworld is the macro brain of the game:
	‚Ä¢	Risk-like territory control ‚Üí Strategic conflict.
	‚Ä¢	Multiple views ‚Üí Player seamlessly zooms from macro (RTS) to micro (Bullet Hell FPS).
	‚Ä¢	RTS units = complex battlefield simulation, enemies = lightweight chaos.
	‚Ä¢	System requires locking/unlocking rules to prevent abuse.

‚∏ª

üëâ Next, I can expand Section III: Units & Enemies in detail, where we‚Äôll flesh out the enemy simplicity vs unit complexity, and describe exactly how those advanced stats interact with each other (e.g., how morale breaks work, how terrain affinity modifies inertia, etc.).

Do you want me to continue with Units & Enemies next, or should I go into the Combat/Emitter‚ÄìTransmitter system first since it ties into performance?