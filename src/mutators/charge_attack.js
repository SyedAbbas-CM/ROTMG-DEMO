// src/mutators/charge_attack.js
// Boss charges toward target with damaging trail

/**\n * Charge attack with predictive targeting and damage trail\n * @param {object} state - per-action scratch object\n * @param {{target:string, speed:number, duration:number, damage:number, width:number}} args\n * @param {number} dt - deltaTime (seconds)\n * @param {*} bossMgr - BossManager instance\n * @param {*} bulletMgr - BulletManager instance\n * @param {*} mapMgr - MapManager instance\n * @param {*} enemyMgr - EnemyManager instance\n * @returns {boolean} finished?\n */\nexport function charge_attack(state, args, dt, bossMgr, bulletMgr, mapMgr, enemyMgr) {\n  const idx = 0;\n  \n  if (!state.init) {\n    state.init = true;\n    state.time = 0;\n    state.maxTime = args.duration ?? 1.0;\n    state.speed = args.speed ?? 15;\n    state.damage = args.damage ?? 150;\n    state.width = args.width ?? 2;\n    \n    // Get target position (simplified)\n    const targetPos = getChargeTarget(args.target, bossMgr, idx);\n    \n    if (targetPos) {\n      const dx = targetPos.x - bossMgr.x[idx];\n      const dy = targetPos.y - bossMgr.y[idx];\n      const distance = Math.sqrt(dx * dx + dy * dy);\n      \n      if (distance > 0) {\n        state.dirX = dx / distance;\n        state.dirY = dy / distance;\n        state.startX = bossMgr.x[idx];\n        state.startY = bossMgr.y[idx];\n        state.trailPoints = [];\n      } else {\n        state.dirX = 1;\n        state.dirY = 0;\n      }\n    }\n  }\n  \n  // Update charge movement\n  const moveX = state.dirX * state.speed * dt;\n  const moveY = state.dirY * state.speed * dt;\n  \n  bossMgr.x[idx] += moveX;\n  bossMgr.y[idx] += moveY;\n  \n  // Add trail point for damage\n  state.trailPoints.push({\n    x: bossMgr.x[idx],\n    y: bossMgr.y[idx],\n    time: state.time\n  });\n  \n  // Create damage trail effect\n  if (bulletMgr.addDamageZone) {\n    bulletMgr.addDamageZone({\n      x: bossMgr.x[idx],\n      y: bossMgr.y[idx],\n      width: state.width,\n      height: state.width,\n      damage: state.damage,\n      duration: 0.5,\n      owner: 'boss',\n      type: 'charge_trail'\n    });\n  }\n  \n  // Add visual effect\n  if (bulletMgr.addEffect) {\n    bulletMgr.addEffect({\n      type: 'charge_trail',\n      x: bossMgr.x[idx],\n      y: bossMgr.y[idx],\n      dirX: state.dirX,\n      dirY: state.dirY,\n      duration: 0.3\n    });\n  }\n  \n  state.time += dt;\n  return state.time >= state.maxTime;\n}\n\nfunction getChargeTarget(targetType, bossMgr, bossIdx) {\n  // Simplified target selection - would integrate with player manager\n  const mockTargets = [\n    { x: bossMgr.x[bossIdx] + 20, y: bossMgr.y[bossIdx] },\n    { x: bossMgr.x[bossIdx] - 15, y: bossMgr.y[bossIdx] + 10 },\n    { x: bossMgr.x[bossIdx] + 5, y: bossMgr.y[bossIdx] - 18 }\n  ];\n  \n  switch (targetType) {\n    case 'random':\n      return mockTargets[Math.floor(Math.random() * mockTargets.length)];\n    case 'nearest':\n      return mockTargets[0];\n    case 'predicted':\n      // Would calculate player movement prediction\n      return mockTargets[0];\n    default:\n      return mockTargets[0];\n  }\n}